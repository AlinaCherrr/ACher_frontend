#include <complex/complex.hpp>

bool testParse(const std::string& str);


void test() {
	const Complex a = { 29.8, 3.34 };
	const Complex b = { 52.12, 77.234 };
	const double c = 2.718281828;
	Complex a1 = a;
	Complex b1 = b;
	Complex zero = { 0.0, 0.0 };
	Complex wr;
	std::cout << "_____________________________________________________" << '\n' << '\n' << "+ Addition operation:" << "\n" << "\n";
	std::cout << "Operation:\t\t" << a << " + " << b << "\n" << "Answer:\t\t\t" << a + b << "\n" << "Correct answer:\t\t" << "{81.92,80.574}" << '\n' << "Status:\t\t\t" << "OK" << '\n' << '\n' << "-----------------------------------------------------" << '\n' << '\n';
	std::cout << "Operation:\t\t" << a << " + " << c << "\n" << "Answer:\t\t\t" << a + c << "\n" << "Correct answer:\t\t" << "{32.51828,3.34}" << '\n' << "Status:\t\t\t" << "OK" << '\n' << '\n' << "-----------------------------------------------------" << '\n' << '\n';
	std::cout << "Operation:\t\t" << c << " + " << b << "\n" << "Answer:\t\t\t" << c + b << "\n" << "Correct answer:\t\t" << "{54.83828,77.234}" << '\n' << "Status:\t\t\t" << "OK" << '\n' << '\n' << "_____________________________________________________" << '\n' << "_____________________________________________________" << '\n' << '\n';
	std::cout << "- Subtraction operation:" << "\n" << "\n";
	std::cout << "Operation:\t\t" << a << " - " << b << "\n" << "Answer:\t\t\t" << a - b << "\n" << "Correct answer:\t\t" << "{-22.31999,-73.89399}" << '\n' << "Status:\t\t\t" << "OK" << '\n' << '\n' << "-----------------------------------------------------" << '\n' << '\n';
	std::cout << "Operation:\t\t" << a << " - " << c << "\n" << "Answer:\t\t\t" << a - c << "\n" << "Correct answer:\t\t" << "{27.08171,3.34}" << '\n' << "Status:\t\t\t" << "OK" << '\n' << '\n' << "-----------------------------------------------------" << '\n' << '\n';
	std::cout << "Operation:\t\t" << c << " - " << b << "\n" << "Answer:\t\t\t" << c - b << "\n" << "Correct answer:\t\t" << "{-49.40171,-77.234}" << '\n' << "Status:\t\t\t" << "OK" << '\n' << '\n' << "_____________________________________________________" << '\n' << "_____________________________________________________" << '\n' << '\n';
	std::cout << "* Multiplication operation:" << "\n" << "\n";
	std::cout << "Operation:\t\t" << a << " * " << b << "\n" << "Answer:\t\t\t" << a * b << "\n" << "Correct answer:\t\t" << "{1295.21444,2475.654}" << '\n' << "Status:\t\t\t" << "OK" << '\n' << '\n' << "-----------------------------------------------------" << '\n' << '\n';
	std::cout << "Operation:\t\t" << a << " * " << c << "\n" << "Answer:\t\t\t" << a * c << "\n" << "Correct answer:\t\t" << "{81.00479,9.07906}" << '\n' << "Status:\t\t\t" << "OK" << '\n' << '\n' << "-----------------------------------------------------" << '\n' << '\n';
	std::cout << "Operation:\t\t" << c << " * " << b << "\n" << "Answer:\t\t\t" << c * b << "\n" << "Correct answer:\t\t" << "{141.67684,209.94377}" << '\n' << "Status:\t\t\t" << "OK" << '\n' << '\n' << "_____________________________________________________" << '\n' << "_____________________________________________________" << '\n' << '\n';
	std::cout << "/ Division operation:" << "\n" << "\n";
	std::cout << "Operation:\t\t" << a << " / " << b << "\n" << "Answer:\t\t\t" << a / b << "\n" << "Correct answer:\t\t" << "{0.208618,-0.245058}" << '\n' << "Status:\t\t\t" << "OK" << '\n' << '\n' << "-----------------------------------------------------" << '\n' << '\n';
	std::cout << "Operation:\t\t" << a << " / " << c << "\n" << "Answer:\t\t\t" << a / c << "\n" << "Correct answer:\t\t" << "{10.96280,1.22872}" << '\n' << "Status:\t\t\t" << "OK" << '\n' << '\n' << "-----------------------------------------------------" << '\n' << '\n';
	std::cout << "Operation:\t\t" << c << " / " << b << "\n" << "Answer:\t\t\t" << c / b << "\n" << "Correct answer:\t\t" << "{0.01632,-0.02418}" << '\n' << "Status:\t\t\t" << "OK" << '\n' << '\n' << "_____________________________________________________" << '\n' << "_____________________________________________________" << '\n' << '\n';
	std::cout << "= Comparison operations:" << "\n" << "\n";
	std::cout << "Operation:\t\t" << a << " == " << a << "\n" << "Answer:\t\t\t" << (a == a) << "\n" << "Correct answer:\t\t" << "1" << '\n' << "Status:\t\t\t" << "OK" << '\n' << '\n' << "-----------------------------------------------------" << '\n' << '\n';
	std::cout << "Operation:\t\t" << a << " == " << b << "\n" << "Answer:\t\t\t" << (a == b) << "\n" << "Correct answer:\t\t" << "0" << '\n' << "Status:\t\t\t" << "OK" << '\n' << '\n' << "-----------------------------------------------------" << '\n' << '\n';
	std::cout << "Operation:\t\t" << b << " != " << b << "\n" << "Answer:\t\t\t" << (b != b) << "\n" << "Correct answer:\t\t" << "0" << '\n' << "Status:\t\t\t" << "OK" << '\n' << '\n' << "-----------------------------------------------------" << '\n' << '\n';
	std::cout << "Operation:\t\t" << a << " != " << b << "\n" << "Answer:\t\t\t" << (a != b) << "\n" << "Correct answer:\t\t" << "1" << '\n' << "Status:\t\t\t" << "OK" << '\n' << '\n' << "-----------------------------------------------------" << '\n' << '\n';
	std::cout << "Operation:\t\t" << c << " == " << b << "\n" << "Answer:\t\t\t" << (c == b) << "\n" << "Correct answer:\t\t" << "0" << '\n' << "Status:\t\t\t" << "OK" << '\n' << '\n' << "-----------------------------------------------------" << '\n' << '\n';
	std::cout << "Operation:\t\t" << a << " != " << c << "\n" << "Answer:\t\t\t" << (a != c) << "\n" << "Correct answer:\t\t" << "1" << '\n' << "Status:\t\t\t" << "OK" << '\n' << '\n' << "_____________________________________________________" << '\n' << "_____________________________________________________" << '\n' << '\n';
	std::cout << "! Conjugate number:" << "\n\n";
	std::cout << "Conjugate for " << a << " ---> " << !a << '\n';
	std::cout << "Conjugate for " << b << " ---> " << !b << "\n\n" << "_____________________________________________________" << '\n' << "_____________________________________________________" << '\n' << '\n';
	std::cout << "- Unary minus:" << "\n\n";
	std::cout << a << " --> " << -a << "\n" << b << " --> " << -b << "\n" << c << " --> " << -c << "\n\n" << "_____________________________________________________" << '\n' << "_____________________________________________________" << '\n' << '\n';
	//std::cout << "| | Number module:" << "\n\n";
	//std::cout << '|' << a << '|' << " = " << (abs(a)) << "\t\tCorrect answer: 29.98659033634868" << '\n';
	//std::cout << '|' << b << '|' << " = " << (abs(b)) << "\tCorrect answer: 93.17502431445887" << "\n\n" << "_____________________________________________________" << '\n' << "_____________________________________________________" << '\n' << '\n';
	std::cout << "a = " << a << "    " << "b = " << b << "    " << "c = " << c << "\n" << "\n";
	std::cout << "Operation: " << "a += b" << "\n" << "a = " << (a1 += b) << "\n" << "Correct answer: " << "{81.92, 80.574}" << '\n' << "Status:" << "OK" << '\n' << '\n' << "-----------------------------------------------------" << '\n' << '\n';
	std::cout << "Operation: " << "b -= c" << "\n" << "b = " << (b1 -= c) << "\n" << "Correct answer: " << "{49.4017,77.234}" << '\n' << "Status: " << "OK" << '\n' << '\n' << "-----------------------------------------------------" << '\n' << '\n';
	std::cout << "Operation: " << "a *= c" << "\n" << "a = " << (a1 *= c) << "\n" << "Correct answer: " << "{222.682,219.023}" << '\n' << "Status: " << "OK" << '\n' << '\n' << "-----------------------------------------------------" << '\n' << '\n';
	std::cout << "Operation: " << "b /= a" << "\n" << "b = " << (b1 /= a) << "\n" << "Correct answer: " << "{1.92409,2.37609}" << '\n' << "Status: " << "OK" << '\n' << '\n' << "_____________________________________________________" << '\n' << "_____________________________________________________" << '\n' << '\n';
	std::cout << ">> << Input/Output:" << "\n\n";
	std::cout << testParse("{8.9,9}") << testParse("{8.9,9") << testParse("{8.9, 9}") << "\n\n" << "Write wr = {8.9,9}  --->  std::cout << wr  --->  " << (wr = { 8.9,9 }) << "\n\n" << "_____________________________________________________" << '\n' << "_____________________________________________________" << '\n' << '\n';
	std::cout << "Exceptions:" << "\n\n";
	std::cout << "Operation:\t\t" << a << " / " << 0 << "\n";
	try
	{
		std::cout << "Answer:\t\t\t" << a / zero << std::endl;

	}
	catch (const std::invalid_argument& e)
	{
		std::cerr << e.what();
	}
	
}

bool testParse(const std::string& str) {
	std::istringstream istrm(str);
	Complex z;
	istrm >> z;
	if (istrm.good()) {
		std::cout << "Read success: " << str << " -> " << z << std::endl;

	}
	else {
		std::cout << "Read error : " << str << " -> " << z << std::endl;

	}
	return istrm.good();
}

int main() {
	test();
}